-- awesome_mode: api-level=4:screen=on
-- If LuaRocks is installed, make sure that packages installed through it are
-- found (e.g. lgi). If LuaRocks is not installed, do nothing.
pcall(require, "luarocks.loader")

-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
-- Theme handling library
local theme = require("beautiful")
-- Notification library
local naughty = require("naughty")
-- Declarative object management
local ruled = require("ruled")
local menubar = require("menubar")
local hotkeys_popup = require("awful.hotkeys_popup")
-- Enable hotkeys help widget for VIM and other apps
-- when client with a matching name is opened:
require("awful.hotkeys_popup.keys")
-- Extra
local common = require("awful.widget.common")
local freedesktop = require("freedesktop")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
naughty.connect_signal("request::display_error", function(message, startup)
    naughty.notification {
        urgency = "critical",
        title   = "Oops, an error happened"..(startup and " during startup!" or "!"),
        message = message
    }
end)
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, font and wallpapers.
theme.init(gears.filesystem.get_configuration_dir() .. "theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = os.getenv("TERMINAL") or "xterm"
editor = os.getenv("EDITOR") or "vi"
filemanager = os.getenv("FILEXP") or "ranger"
browser = os.getenv("BROWSER") or "netsurf"
editor_cmd = terminal .. " -e " .. editor -- this does not work with termite

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"
altkey = "Mod1"
ctrlkey = "Control"
shftkey = "Shift"

-- custom
max_tags = theme.max_tags or 4
bar_height = theme.bar_height or 20
task_width = theme.task_width or 256

-- system commands
lock_cmd = "light-locker-command -l"
suspend_cmd = "systemctl suspend"
reboot_cmd = "systemctl reboot"
halt_cmd = "systemctl halt"

-- }}}

-- {{{ Menu
-- Create a launcher widget and a main menu
myawesomemenu = {
   { "Show Hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
   { "Lock Desktop", function () awful.util.spawn(lock_cmd) end },
   { "Restart Desktop", awesome.restart },
   { "Exit Desktop", function() awesome.quit() end },
   { "Suspend System", function () awful.util.spawn(suspend_cmd) end },
   { "Reboot System", function () awful.util.spawn(reboot_cmd) end },
   { "Halt System", function () awful.util.spawn(halt_cmd) end },
}

--mysessionmenu = {
--}

mymainmenu = freedesktop.menu.build({
    icon_size = bar_height or 16,
    before = {
        { "Awesome", myawesomemenu, theme.awesome_icon },
        { "Open Terminal", terminal, theme.terminal_icon },
        { "Open Files", filemanager, theme.filemanager_icon },
    },
    after = nil,
    sub_menu = nil,
    skip_items = nil,
})

mymenuicon = gears.color.recolor_image(
                    theme.launcher_icon or theme.awesome_icon,
                    theme.bg_focus)
mylauncher = awful.widget.launcher({ image = mymenuicon, menu = mymainmenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}

-- {{{ Tag
-- Table of layouts to cover with awful.layout.inc, order matters.
tag.connect_signal("request::default_layouts", function()
    awful.layout.append_default_layouts({
        awful.layout.suit.floating,
        awful.layout.suit.tile.left,
        awful.layout.suit.fair,
        awful.layout.suit.max,
    })
end)
-- }}}

-- {{{ Wibar

-- separator
local separator = wibox.widget.textbox(" ")

-- Create a textclock widget
local mytextclock = wibox.widget.textclock()
local mycalendar = awful.widget.calendar_popup.month()
mycalendar:attach(mytextclock, "tr")
mycalendar.opacity = theme.opacity

local tag_list = {}

screen.connect_signal("request::desktop_decoration", function(s)

    -- Create tag list from max_tags
    for n = 1,max_tags,1 do
        table.insert(tag_list, n)
    end

    -- Each screen has its own tag table.
    awful.tag(tag_list, s, awful.layout.layouts[1])

    -- Create a promptbox for each screen
    s.mypromptbox = awful.widget.prompt()

    -- Create an imagebox widget which will contain an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    s.mylayoutbox = awful.widget.layoutbox {
        screen  = s,
        buttons = {
            awful.button({ }, 1, function () awful.layout.inc( 1) end),
            awful.button({ }, 3, function () awful.layout.inc(-1) end),
        }
    }

    -- Create a taglist widget
    s.mytaglist = awful.widget.taglist {
        screen  = s,
        filter  = awful.widget.taglist.filter.all,
        buttons = {
            awful.button({ }, 1, function(t) t:view_only() end),
            awful.button({ modkey }, 1, function(t)
                                            if client.focus then
                                                client.focus:move_to_tag(t)
                                            end
                                        end),
            awful.button({ }, 3, awful.tag.viewtoggle),
            awful.button({ modkey }, 3, function(t)
                                            if client.focus then
                                                client.focus:toggle_tag(t)
                                            end
                                        end),
        },
        awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
        awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end),
    }

    local function set_task_width(w, buttons, label, data, objects)
        common.list_update(w, buttons, label, data, objects)
        w:set_max_widget_size(task_width)
    end

    -- Create a tasklist widget
    s.mytasklist = awful.widget.tasklist {
        screen  = s,
        filter  = awful.widget.tasklist.filter.currenttags,
        update_function = set_task_width,
        buttons = {
            awful.button({ }, 1, function (c)
                c:activate { context = "tasklist", action = "toggle_minimization" }
            end),
            awful.button({ }, 3, function() awful.menu.client_list { theme = { width = 320 } } end),
        }
    }

    -- systray widget
    s.mysystray = wibox.widget.systray()
    s.mysystray.opacity = theme.opacity
    s.mysystray:set_base_size(bar_height)

    -- Create the wibox
    s.mywibox = awful.wibar {
        screen = s,
        position = "top",
        height = bar_height,
        border_width = 2,
        border_color = theme.wibar_bg
        --border_color = theme.bg_normal
    }

    -- Add widgets to the wibox
    s.mywibox.widget = {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
            layout = wibox.layout.fixed.horizontal,
            separator,
            mylauncher,
            separator,
            separator,
            s.mytaglist,
            separator,
            s.mypromptbox,
        },
        s.mytasklist, -- Middle widget
        { -- Right widgets
            layout = wibox.layout.fixed.horizontal,
            net,
            s.mysystray,
            separator,
            mytextclock,
            separator,
            s.mylayoutbox,
            separator,
        },
    }
end)

-- {{{ Mouse bindings
awful.mouse.append_global_mousebindings({
    awful.button({ }, 3, function () mymainmenu:toggle() end),
})
-- }}}

-- {{{ Key bindings

-- General Awesome keys
awful.keyboard.append_global_keybindings({
    awful.key({ modkey }, "Return", function () awful.spawn(terminal) end,
              {description = "open a terminal", group = "Awesome: core"}),
    awful.key({ modkey }, "w", function () mymainmenu:show() end,
              {description = "show main menu", group = "Awesome: core"}),
    awful.key({ modkey }, "s", hotkeys_popup.show_help,
              {description="show help", group="Awesome: core"}),
    awful.key({ modkey, ctrlkey }, "r", awesome.restart,
              {description = "reload awesome", group = "Awesome: core"}),
    awful.key({ modkey, ctrlkey }, "q", awesome.quit,
              {description = "quit awesome", group = "Awesome: core"}),
    awful.key({ modkey }, "x", function () awful.screen.focused().mypromptbox:run() end,
              {description = "run prompt", group = "Awesome: core"}),
    awful.key({ modkey, ctrlkey }, "x",
              function ()
                  awful.prompt.run {
                    prompt       = "Run Lua code: ",
                    textbox      = awful.screen.focused().prompt_widget.widget,
                    exe_callback = awful.util.eval,
                    history_path = awful.util.get_cache_dir() .. "/history_eval"
                  }
              end,
              {description = "lua execute prompt", group = "Awesome: core"}),
})

-- Tags related keybindings
awful.keyboard.append_global_keybindings({
    awful.key({ modkey }, "Left", awful.tag.viewprev,
              {description = "view previous", group = "Awesome: tag"}),
    awful.key({ modkey }, "Right", awful.tag.viewnext,
              {description = "view next", group = "Awesome: tag"}),
    awful.key({ modkey }, "Escape", awful.tag.history.restore,
              {description = "go back", group = "Awesome: tag"}),
})

-- Focus related keybindings
awful.keyboard.append_global_keybindings({
    awful.key({ modkey }, "j",
        function ()
            awful.client.focus.byidx( 1)
        end,
        {description = "focus next by index", group = "Awesome: client"}
    ),
    awful.key({ modkey }, "k",
        function ()
            awful.client.focus.byidx(-1)
        end,
        {description = "focus previous by index", group = "Awesome: client"}
    ),
    awful.key({ altkey }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end,
        {description = "go back", group = "Awesome: client"}),
    awful.key({ modkey, ctrlkey }, "j", function () awful.screen.focus_relative( 1) end,
              {description = "focus the next screen", group = "Awesome: screen"}),
    awful.key({ modkey, ctrlkey }, "k", function () awful.screen.focus_relative(-1) end,
              {description = "focus the previous screen", group = "Awesome: screen"}),
    awful.key({ modkey, ctrlkey }, "n",
              function ()
                  local c = awful.client.restore()
                  -- Focus restored client
                  if c then
                    c:activate { raise = true, context = "key.unminimize" }
                  end
              end,
              {description = "restore minimized", group = "Awesome: client"}),
})

-- Layout related keybindings
awful.keyboard.append_global_keybindings({
    awful.key({ modkey, shftkey }, "j", function () awful.client.swap.byidx(  1) end,
              {description = "swap with next client by index", group = "Awesome: client"}),
    awful.key({ modkey, shftkey }, "k", function () awful.client.swap.byidx( -1) end,
              {description = "swap with previous client by index", group = "Awesome: client"}),
    awful.key({ modkey }, "'", awful.client.urgent.jumpto,
              {description = "jump to urgent client", group = "Awesome: client"}),
    awful.key({ modkey }, "l", function () awful.tag.incmwfact( 0.05) end,
              {description = "increase master width factor", group = "Awesome: layout"}),
    awful.key({ modkey }, "h", function () awful.tag.incmwfact(-0.05) end,
              {description = "decrease master width factor", group = "Awesome: layout"}),
    awful.key({ modkey, shftkey }, "h", function () awful.tag.incnmaster( 1, nil, true) end,
              {description = "increase the number of master clients", group = "Awesome: layout"}),
    awful.key({ modkey, shftkey }, "l", function () awful.tag.incnmaster(-1, nil, true) end,
              {description = "decrease the number of master clients", group = "Awesome: layout"}),
    awful.key({ modkey, ctrlkey }, "h", function () awful.tag.incncol( 1, nil, true) end,
              {description = "increase the number of columns", group = "Awesome: layout"}),
    awful.key({ modkey, ctrlkey }, "l", function () awful.tag.incncol(-1, nil, true) end,
              {description = "decrease the number of columns", group = "Awesome: layout"}),
    awful.key({ modkey }, "]", function () awful.layout.inc( 1) end,
              {description = "select next", group = "Awesome: layout"}),
    awful.key({ modkey }, "[", function () awful.layout.inc(-1) end,
              {description = "select previous", group = "Awesome: layout"}),
})

awful.keyboard.append_global_keybindings({
    awful.key {
        modifiers   = { modkey },
        keygroup    = "numrow",
        description = "only view tag",
        group       = "Awesome: tag",
        on_press    = function (index)
            local screen = awful.screen.focused()
            local tag = screen.tags[index]
            if tag then
                tag:view_only()
            end
        end,
    },
    awful.key {
        modifiers   = { modkey, ctrlkey },
        keygroup    = "numrow",
        description = "toggle tag",
        group       = "Awesome: tag",
        on_press    = function (index)
            local screen = awful.screen.focused()
            local tag = screen.tags[index]
            if tag then
                awful.tag.viewtoggle(tag)
            end
        end,
    },
    awful.key {
        modifiers = { modkey, shftkey },
        keygroup    = "numrow",
        description = "move focused client to tag",
        group       = "Awesome: tag",
        on_press    = function (index)
            if client.focus then
                local tag = client.focus.screen.tags[index]
                if tag then
                    client.focus:move_to_tag(tag)
                end
            end
        end,
    },
    awful.key {
        modifiers   = { modkey, ctrlkey, shftkey },
        keygroup    = "numrow",
        description = "toggle focused client on tag",
        group       = "Awesome: tag",
        on_press    = function (index)
            if client.focus then
                local tag = client.focus.screen.tags[index]
                if tag then
                    client.focus:toggle_tag(tag)
                end
            end
        end,
    },
    awful.key {
        modifiers   = { modkey },
        keygroup    = "numpad",
        description = "select layout directly",
        group       = "Awesome: layout",
        on_press    = function (index)
            local t = awful.screen.focused().selected_tag
            if t then
                t.layout = t.layouts[index] or t.layout
            end
        end,
    }
})

-- Custom
awful.keyboard.append_global_keybindings({
    -- Rofi
    awful.key({ modkey }, "space", function () awful.util.spawn("rofi -show drun") end,
              {description = "show application search", group = "Awesome: search"}),
    awful.key({ modkey }, ";", function () awful.util.spawn("rofi -show run") end,
              {description = "show command search", group = "Awesome: search"}),
    awful.key({ modkey }, "Tab", function () awful.util.spawn("rofi -show window") end,
              {description = "show window search", group = "Awesome: search"}),
    awful.key({ modkey, "Mod1" }, "f", function () awful.util.spawn("rofi-pass") end,
              {description = "show file browser", group = "Awesome: search"}),
    awful.key({ modkey, "Mod1" }, "p", function () awful.util.spawn("rofi-pass") end,
              {description = "show password search", group = "Awesome: search"}),
    -- Media keys
    awful.key({ }, "XF86AudioPlay", function () awful.util.spawn("mpc toggle") end,
              {description = "toggle play and pause", group = "Awesome: Fn keys"}),
    awful.key({ }, "XF86AudioNext", function () awful.util.spawn("mpc next") end,
              {description = "go to next track", group = "Awesome: Fn keys"}),
    awful.key({ }, "XF86AudioPrev", function () awful.util.spawn("mpc prev") end,
              {description = "go to previous track", group = "Awesome: Fn keys"}),
    awful.key({ }, "XF86AudioRaiseVolume", function () awful.util.spawn("volume-ctl.sh -u 5") end,
              {description = "raise volume", group = "Awesome: Fn keys"}),
    awful.key({ }, "XF86AudioLowerVolume", function () awful.util.spawn("volume-ctl.sh -d 5") end,
              {description = "lower volume", group = "Awesome: Fn keys"}),
    awful.key({ }, "XF86AudioMute", function () awful.util.spawn("volume-ctl.sh -m") end,
              {description = "toggle mute", group = "Awesome: Fn keys"}),
    awful.key({ }, "XF86KbdBrightnessUp", function () awful.util.spawn("backlight-ctl -u 5") end,
              {description = "increase backlight brightness", group = "Awesome: Fn keys"}),
    awful.key({ }, "XF86KbdBrightnessUp", function () awful.util.spawn("backlight-ctl -d 5") end,
              {description = "decrease backlight brightness", group = "Awesome: Fn keys"}),
    -- screenshot
    awful.key({ }, "Print", function () awful.util.spawn("screen-capture.sh") end,
              {description = "capture screenshot", group = "Awesome: screenshot"}),
    awful.key({ modkey }, "Print", function () awful.util.spawn("screen-capture.sh -s") end,
              {description = "capture screenshot from selection", group = "Awesome: screenshot"})
})

client.connect_signal("request::default_mousebindings", function()
    awful.mouse.append_client_mousebindings({
        awful.button({ }, 1, function (c)
            c:activate { context = "mouse_click" }
        end),
        awful.button({ modkey }, 1, function (c)
            c:activate { context = "mouse_click", action = "mouse_move"  }
        end),
        awful.button({ modkey }, 3, function (c)
            c:activate { context = "mouse_click", action = "mouse_resize"}
        end),
    })
end)

client.connect_signal("request::default_keybindings", function()
    awful.keyboard.append_client_keybindings({
        awful.key({ modkey, shftkey }, "f",
            function (c)
                c.fullscreen = not c.fullscreen
                c:raise()
            end,
            {description = "toggle fullscreen", group = "Awesome: client"}),
        awful.key({ modkey, shftkey }, "c", function (c) c:kill() end,
                {description = "close", group = "Awesome: client"}),
        awful.key({ modkey }, "f", awful.client.floating.toggle,
                {description = "toggle floating", group = "Awesome: client"}),
        awful.key({ modkey }, "p", function (c) c:swap(awful.client.getmaster()) end,
                {description = "move to master", group = "Awesome: client"}),
        awful.key({ modkey, shftkey }, "o", function (c) c:move_to_screen() end,
                {description = "move to screen", group = "Awesome: client"}),
        awful.key({ modkey }, "t", function (c) c.ontop = not c.ontop end,
                {description = "toggle keep on top", group = "Awesome: client"}),
        awful.key({ modkey }, "n",
            function (c)
                -- The client currently has the input focus, so it cannot be
                -- minimized, since minimized clients can't have the focus.
                c.minimized = true
            end ,
            {description = "minimize", group = "Awesome: client"}),
        awful.key({ modkey }, "m",
            function (c)
                c.maximized = not c.maximized
                c:raise()
            end ,
            {description = "(un)maximize", group = "Awesome: client"}),
        awful.key({ modkey, ctrlkey }, "m",
            function (c)
                c.maximized_vertical = not c.maximized_vertical
                c:raise()
            end ,
            {description = "(un)maximize vertically", group = "Awesome: client"}),
        awful.key({ modkey, shftkey }, "m",
            function (c)
                c.maximized_horizontal = not c.maximized_horizontal
                c:raise()
            end ,
            {description = "(un)maximize horizontally", group = "Awesome: client"}),
    })
end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    c:activate { context = "mouse_enter", raise = false }
end)

-- }}}

-- {{{ Rules
-- Rules to apply to new clients.
ruled.client.connect_signal("request::rules", function()
    -- All clients will match this rule.
    ruled.client.append_rule {
        id         = "global",
        rule       = { },
        properties = {
            focus     = awful.client.focus.filter,
            raise     = true,
            screen    = awful.screen.preferred,
            placement = awful.placement.no_overlap+awful.placement.no_offscreen
        }
    }

    -- Floating clients.
    ruled.client.append_rule {
        id       = "floating",
        rule_any = {
            instance = { "copyq", "pinentry" },
            class = {
                "Arandr",
                --"Blueman-manager",
                --"Pavucontrol",
                --"Lxappearance",
                --"qt5ct"
            },
            -- Note that the name property shown in xprop might be set slightly after creation of the client
            -- and the name shown there might not match defined rules here.
            name    = {
                "Event Tester",  -- xev.
            },
            role    = {
                "pop-up",         -- e.g. Google Chrome's (detached) Developer Tools.
            }
        },
        properties = { floating = true }
    }

    -- Add titlebars to normal clients and dialogs
    ruled.client.append_rule {
        id         = "titlebars",
        rule_any   = { type = { "normal", "dialog" } },
        properties = { titlebars_enabled = false }
    }

    -- URxvt
    ruled.client.append_rule {
        id         = "titlebars",
        rule_any   = { class = { "URxvt" }, instance = { "urxvt" } },
        properties = {
            -- Make titlebar match color and transparency of terminal
            transparent_titlebar = true,
            -- Make window size correctly when tiled
            size_hints_honor = false
        }
    }

end)

-- }}}

-- {{{ Titlebars
-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)

    local bg_color = theme.titlebar_bg_normal
    if c.transparent_titlebar then
        bg_color = theme.titlebar_bg_transparent
    end

    -- buttons for the titlebar
    local buttons = {
        awful.button({ }, 1, function()
            c:activate { context = "titlebar", action = "mouse_move"  }
        end),
        awful.button({ }, 3, function()
            c:activate { context = "titlebar", action = "mouse_resize"}
        end),
    }

    awful.titlebar(c, {
            size = bar_height,
            bg_normal = bg_color,
            bg_focus = bg_color,
        }).widget = {
        { -- Left
            {
                awful.titlebar.widget.iconwidget(c),
                buttons = buttons,
                layout  = wibox.layout.fixed.horizontal
            },
            margins = 2,
            widget = wibox.container.margin
        },
        { -- Middle
            { -- Title
                align  = "center",
                widget = awful.titlebar.widget.titlewidget(c)
            },
            buttons = buttons,
            layout  = wibox.layout.flex.horizontal
        },
        { -- Right
            {
                awful.titlebar.widget.minimizebutton (c),
                awful.titlebar.widget.maximizedbutton(c),
                awful.titlebar.widget.closebutton    (c),
                layout = wibox.layout.fixed.horizontal()
            },
            margins = 2,
            widget = wibox.container.margin
        },
        layout = wibox.layout.align.horizontal
    }
end)


client.connect_signal("request::manage", function (c)
    if awesome.startup
      and not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end

    -- only create titlebars for floating windows
    if c.floating or c.first_tag.layout.name == "floating" then
        awful.titlebar.show(c)
    else
        awful.titlebar.hide(c)
    end
end)

-- toggle titlebar on floating client
client.connect_signal("property::floating", function(c)
    local b = false;
    if c.first_tag ~= nil then
        b = c.first_tag.layout.name == "floating"
    end
    if c.floating or b then
        awful.titlebar.show(c)
    else
        awful.titlebar.hide(c)
    end
end)

-- toggle titlebar on floating layout
tag.connect_signal("property::layout", function(t)
    local clients = t:clients()
    for _,c in pairs(clients) do
        if c.floating or c.first_tag.layout.name == "floating" then
            awful.titlebar.show(c)
        else
            awful.titlebar.hide(c)
        end
    end
end)

-- {{{ Notifications

ruled.notification.connect_signal('request::rules', function()
    -- All notifications will match this rule.
    ruled.notification.append_rule {
        rule       = { },
        properties = {
            screen           = awful.screen.preferred,
            implicit_timeout = 15,
            opacity          = theme.opacity,
        }
    }
end)

naughty.connect_signal("request::display", function(n)
    naughty.layout.box { notification = n }
end)

-- }}}

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    c:activate { context = "mouse_enter", raise = false }
end)

-- Autostart
awful.spawn.with_shell(
   'if (xrdb -query | grep -q "^awesome\\.started:\\s*true$"); then exit; fi;' ..
   'xrdb -merge <<< "awesome.started:true";' ..
   'dex --environment Awesome --autostart --search-paths "$XDG_CONFIG_HOME/autostart"'
)
